// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                     String          @id @db.Uuid
    avatars                Avatar[]
    ownFriendships         FriendShip[]    @relation("ownFriendShipRef")
    friendFriendships      FriendShip[]    @relation("friendShipsToFriendRef") // 友達から自分へのfriendship
    sentFriendRequests     FriendRequest[] @relation("friend_request_sender_user")
    receivedFriendRequests FriendRequest[] @relation("friend_request_recipient_user")
    contactAvatars         ContactAvatar[]
    myContactItems         ContactItem[]

    @@map("users")
}

model ContactItem {
    id          Int         @id @default(autoincrement())
    owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String      @db.Uuid
    type        ContactType
    displayText String?
    value       String
    createdAt   DateTime    @default(now())

    @@map("contact_items")
}

enum ContactType {
    EMAIL
    PHONE
    LINE
    GITHUB
    TWITTER
    INSTAGRAM
    DISCORD
    CUSTOMLINK
    CUSTOMTEXT
}

model Avatar {
    id                       Int                     @id @default(autoincrement())
    name                     String
    iconFileName             String                  @default("avatars/default.png")
    owner                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                   String                  @db.Uuid
    useForPrimaryFriendShips FriendShip[]
    inviteInformation        FriendInviteInfomation?
    usingFriendRequests      FriendRequest[]         @relation("friend_request_sender_avatar")
    receivedFriendRequests   FriendRequest[]         @relation("friend_request_recipient_avatar")
    createdAt                DateTime                @default(now())
    updatedAt                DateTime                @updatedAt
    usingContactInFriends    ContactAvatar[] // 利用されている連絡先項目

    @@map("avatars")
}

model FriendShip {
    id                    Int             @id @default(autoincrement())
    owner                 User            @relation(name: "ownFriendShipRef", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId               String          @db.Uuid
    friend                User            @relation(name: "friendShipsToFriendRef", fields: [friendId], references: [id], onDelete: Cascade)
    friendId              String          @db.Uuid
    primaryFriendAvatar   Avatar          @relation(fields: [primaryFriendAvatarId], references: [id], onDelete: Restrict)
    primaryFriendAvatarId Int
    createdAt             DateTime        @default(now())
    updatedAt             DateTime        @updatedAt
    contactAvatars        ContactAvatar[]

    @@map("friendships")
}

// 連絡先一覧に表示するアバターたち
model ContactAvatar {
    id           Int        @id @default(autoincrement())
    owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId      String     @db.Uuid
    friendShip   FriendShip @relation(fields: [friendShipId], references: [id], onDelete: Cascade)
    friendShipId Int
    avatar       Avatar     @relation(fields: [avatarId], references: [id], onDelete: Cascade)
    avatarId     Int
    createdAt    DateTime   @default(now())

    @@map("contact_avatars")
}

model FriendInviteInfomation {
    id        Int      @id @default(autoincrement())
    avatar    Avatar   @relation(fields: [avatarId], references: [id], onDelete: Cascade)
    avatarId  Int
    token     String
    createdAt DateTime @default(now())

    @@unique([avatarId])
    @@map("friend_invite_infomations")
}

model FriendRequest {
    id                Int      @id @default(autoincrement())
    senderAvatar      Avatar   @relation(name: "friend_request_sender_avatar", fields: [senderAvatarId], references: [id], onDelete: Cascade)
    senderAvatarId    Int
    senderUser        User     @relation(name: "friend_request_sender_user", fields: [senderUserId], references: [id], onDelete: Cascade)
    senderUserId      String   @db.Uuid
    recipientAvatar   Avatar   @relation(name: "friend_request_recipient_avatar", fields: [recipientAvatarId], references: [id], onDelete: Cascade)
    recipientAvatarId Int      @map("recipientId")
    recipientUser     User     @relation(name: "friend_request_recipient_user", fields: [recipientUserId], references: [id], onDelete: Cascade)
    recipientUserId   String   @db.Uuid
    createdAt         DateTime @default(now())

    @@unique([senderUserId, recipientUserId])
    @@map("friend_requests")
}
