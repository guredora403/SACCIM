// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @db.Uuid
    avatars Avatar[]
    ownFriendships FriendShip[] @relation("ownFriendShipRef")
    friendFriendships FriendShip[] @relation("friendShipsToFriendRef") // 友達から自分へのfriendship
    sentFriendRequests FriendRequest[] @relation("friend_request_sender_user")
    receivedFriendRequests FriendRequest[] @relation("friend_request_recipient_user")
    @@map("users")
}

model Avatar {
    id Int @id @default(autoincrement())
    name String
    iconFileName String @default("avatars/default.png")
    owner User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Uuid
    useForPrimaryFriendShips FriendShip[]
    inviteInformation FriendInviteInfomation?
    usingFriendRequests FriendRequest[] @relation("friend_request_sender_avatar")
    receivedFriendRequests FriendRequest[] @relation("friend_request_recipient_avatar")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@map("avatars")
}


model FriendShip {
    id Int @id @default(autoincrement())
    owner User @relation(name: "ownFriendShipRef", fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Uuid
    friend User @relation(name: "friendShipsToFriendRef", fields: [friendId], references: [id], onDelete: Cascade)
    friendId String @db.Uuid
    primaryFriendAvatar Avatar @relation(fields: [primaryFriendAvatarId], references: [id], onDelete: Restrict)
    primaryFriendAvatarId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@map("friendships")
}

model FriendInviteInfomation {
    id Int @id @default(autoincrement())
    avatar Avatar @relation(fields: [avatarId], references: [id], onDelete: Cascade)
    avatarId Int
    token String
    createdAt DateTime @default(now())
    @@unique([avatarId])
    @@map("friend_invite_infomations")
}

model FriendRequest {
    id Int @id @default(autoincrement())
    senderAvatar Avatar @relation(name: "friend_request_sender_avatar", fields: [senderAvatarId], references: [id], onDelete: Cascade)
    senderAvatarId Int
    senderUser User @relation(name: "friend_request_sender_user", fields: [senderUserId], references: [id], onDelete: Cascade)
    senderUserId String @db.Uuid
    recipientAvatar Avatar @relation(name: "friend_request_recipient_avatar", fields: [recipientAvatarId], references: [id], onDelete: Cascade)
    recipientAvatarId Int @map("recipientId")
    recipientUser User @relation(name: "friend_request_recipient_user", fields: [recipientUserId], references: [id], onDelete: Cascade)
    recipientUserId String @db.Uuid
    createdAt DateTime @default(now())
    @@map("friend_requests")
    @@unique([senderUserId, recipientUserId])
}
